---
layouts: post
title: "Der Kommisar's in Town: Embedded Security Teams"

categories: netsec
---
I've recently been thinking again about how security functions within a company are organized (not so much that anyone's specifically asked me). I have been asked (mostly by myself) where I think I see network engineering heading in the next few years. There is, of couse, doom-and-gloom that "networking is dying, thanks to the cloud". Bullshit. All that Cloud Magicks (**TM**) is held together by networking. Then there is the whole "push towards automation (and losing console jockey jobs)". I think this is short-sighted, too. If that were the case, we'd have no systems administrators or systems engineers. Rather, their job function changed and they're **DevOps Engineers** or **SREs** or **Cloud Engineers** now. They're still building the systems they need, they're just using Amazon, Microsoft and Google's server hardware, or they are operating their own hardware and utilizing _Infrastructure as Code_ (_IaC_). Or both. What seriously changed was that your old-fashioned admin had to learn better coding practice than cobbling a script together and they had to stop doing things the manual (hard) way and change their mindset in how they worked (the pets versus cattle analogy).

I think, network engineering, is going to be heading to a more **SRE** and **IaC** route (some pun intended). Rather than greenfield deployments that turn brown on their own, with bespoke custom configurations and only touched once in a blue moon for fear of an outage, network engineering is going to keep watering our deployment lawns, maintain the yard and re-landscape every season so that we never have an ugly patch of brown or crabgrass. I think these yardwork metaphors work; I hate yardwork! Companies, by and large, are still going to want offices, though they might be smaller than they might have been originally planned. Companies that grow to larger scale are probably going to still want Points of Presence for edge activity, which will also need backbone management. If a company is running entirely in public cloud services, they are going to evenutally have to adopt segmentation and firewalling between sensitive services. Your average SRE might be able to take care of it but someone knowledgeable in network security is probably a better choice. 

I foresee a shift in **how** network engineers are going to work - and I expect more of it to be with _IaC_ and like an _SRE_ - but this gets me thinkning about other traditional silos, namely information security.

# Security As A Monolith

In many companies, and the traditional model has been, that different information technology teams are separated by discipline - network engineers, software developers, database administrators, other systems administrators, etc. So as the organization of the information security pillar came about, it was its own, monolithic pillar like those other focuses. If you had "IT security" in your job description, you probably worked with other people who had "IT security" in their descriptions. The whole of InfoSec might be split into governance and policy teams and technical teams; the best technical teams would be functional in multiple domains (networks, systems, data, access/authentication) but subject matter experts in one or two specific domains. This means that your team not only needs to be keeping up with trends in their SME domains but also being able to teach and convey that information simultaneously to other colleagues. 

Compared to those other domains, this is an incredibly tall ask, especially given that IT security gets very in depth very quickly into specialties. This also causes friction amongst other teams in the techology organization - IT security is often the "bearer of bad news" when it comes to audit results and may not have the in depth background of a database engineer when they request 'data encryption at rest' and set an abitrary deadline. On its face it sounds reasonable but the database engineer would know in better detail the resources it would _actually_ take to accomplish the task.

# Split the Difference

At a previous position, they had an interesting method of branching their security teams. While it was mostly organized along a monolithic structure - a singular point in a broader IT org, composed of smaller teams focusing on technical solutions, policy solutions and risk management, it also accounted for different requirements by different divisions. A financial institution that had personal banking, commercial banking, investments and trading and mortgages, each of these lines of business all had their own unique regulatory requirements outside of standard IT security controls. A one-size-fits-all approach would get each line of business to a majority of compliance but how much of a compliance gap was left, and how that affected ability for bankers and traders to adequately do their jobs, could lead to (insecure) shadow IT. 

Sitting inbetween the policy and technical solutions teams within InfoSec were a small team of security engineers who were subject matter experts on a specific line of business. They understood the regulations and needs of teams as it related specifically to their corporate functions. And it gave folks within those lines people to specifically ask InfoSec questions. These engineers could craft policy exceptions based around tight controls to maintain the security of the business and allowing that business to get what it needed. They also could work with the broader IT security technical team on the specific technical needs for that line of business, from firewall ACL policies or IPS/IDS rules or implementing single-sign on to sensitive systems. 

While this was effective for improving the flexibility of the InfoSec team to meeting a variety of business goals (due to the various lines of business), it still fell short of really addressing the monolithic approach's chief problem - a team of people who needed to be generalists in everything and securing everything and subject matter experts in a couple of things (technology or business). It still had issues with security issues that were very deep within a technical discipline and the project management that goes along with deploying or designing fixes for those issues. Often times, security's needs in this area would be competing with those technology teams own roadmaps and plans. And with security segmented as its own silo, design engagement is often missed at critical stages early on to head many of these problems off at the pass.

# Embed Security Personnel Within Their Technical Discipline

What is unique about information security that puts it in its own silo? Part of it, as I noted, is when the discipline began coming about on its own. Most major enterprises began their information security programs in the early 2000s (or very late 1990s), well after they adopted other information technology verticals. But part of it, too, is framework and skills needed for an information security program. There is typically a governance team and a technical team. The skills unique to information security but needed across all members of the information security organization are understandings of audit frameworks, writing effective policies, mitigating technical controls and understanding of security technologies like firewalls, IPS/IDS and encryption. 

Governance, Risk and Compliance (GRC), the domain within information security that handles security policy and audit frameworks and testing, is a skill that has varying complexities depending on the business itself. Compared to the more technical side of information security, the barrier to entry is significantly lower. A company that is in a more regulated industry like finance or utilities, will have standard technology and procedure audits to undergo but legal regulatory commitments as well. However, even when working in the regulated space, if we reduce the scope, we can put the items of policy onto the specific engineering teams. The skills needed for crafting good, enforcable policy and guidelines, are unique to information security but transferrable to every technology domain. The technical skills needed for adopting the best mitigating controls are left to the engineering teams in that technology domain but now those engineering teams have folks that can express that in policy.

In the networking domain, where I currently am, this would mean that we'd have any number of network engineering teams that we needed for our company. One of those teams would be a Network Security team. This team would be comprised of folks who specifically focus on the security of computer and data networks. They would work most closely with the other network engineers who manage a company's network regarding security practices but also work with other information security teams on cross-functional areas (say the DBAs want to encrypt data at rest _and_ in transit). They would not be subjected to finding the best encryption method for the databases at rest. 

So in a larger perspective, we would break down along technical verticals - networks, databases, operating systems, development - and instead of having a single point of "security" within its own vertical, we would instead have a small team of engineers in each vertical dedicaated to security tasks. We can think of that as "network security are still network engineers" or "X-technology-security are still X engineers". Database engineers are going to know the best how databases function, scale and, with a keen eye on security, know how best they can be secured. Likewise for operating systems - whether you have a team of Windows or Linux admins and engineers, they are going to know those systems best, and with the proper training and eye, how best to secure them. Development (or Application Security) can work either along lines of products and services or along languages and libraries. Rather than have a deep team of generalists who are subject matter experts in one or two technologies, we can have multiple smaller teams, with dedicated charters and focuses, and attract the best for those areas. In terms of headcount, it might be more people but eliminating scope creep from other technologies can also lead to higher satisfaction and retention. 

## Solids and Dots - Mapping Embedded Teams on an Organizational Chart

In our previous example, the Network Security team, on an org chart, would be _**solid lined**_ to an appropriate Network Engineering manager resource, but _also_ _**dotted lined**_ to an information security working group, the CISO or some other collaboration group with the _other_ information security teams. Security works best, when it can be equally applied. This is a benefit to a monolithic program, all of the InfoSec staff are in line with each other. For companies where deep techincal understanding is needed, though, we need to enhance collaboration across different technology verticals between the respective security teams. If we follow the **embed** model, we need to look at a way for everyone to collaborate when needed.

Let's say in our company (using this model), we have our CISO sitting under a CIO/CTO that is peers with the CFO, COO, etc and report to the CEO. The CISO would have some direct reports, like a general SecOps management team with SecOps engineers underneath doing SOC monitoring, escalations and general vulnerability management. That chain would be a _**solid line**_. However, given all of the IT verticals with embedded security teams, those teams would not solid line to the CISO, but instead being a _**dotted line**_, meaning they have some reporting and collaboration responsibility to the CISO but their specific management tasks would instead fall to a manager in their respective technology vertical. If we think about these embedded security teams, day to day responsibilities would be to their technology vertical - networks, databses, systems, etc. - but they would have periodic meetings (weekly, fortnightly, monthly) meetings with the other technology vertical security and SecOps staffs for explicitly cross-functional collaboration to keep security synchronized. 
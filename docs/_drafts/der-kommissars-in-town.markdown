---
layouts: post
title: "Der Kommisar's in Town: Embedded Security Teams"

categories: netsec
---
I've recently been thinking again about how security functions within a company are organized (not so much that anyone's specifically asked me). I have been asked (mostly by myself) where I think I see network engineering heading in the next few years. There is, of couse, doom-and-gloom that "networking is dying, thanks to the cloud". Bullshit. All that Cloud Magicks (**TM**) is held together by networking. Then there is the whole "push towards automation (and losing console jockey jobs)". I think this is short-sighted, too. If that were the case, we'd have no systems administrators or systems engineers. Rather, their job function changed and they're **DevOps Engineers** or **SREs** or **Cloud Engineers** now. They're still building the systems they need, they're just using Amazon, Microsoft and Google's server hardware, or they are operating their own hardware and utilizing _Infrastructure as Code_ (_IaC_). Or both. What seriously changed was that your old-fashioned admin had to learn better coding practice than cobbling a script together and they had to stop doing things the manual (hard) way and change their mindset in how they worked (the pets versus cattle analogy).

I think, network engineering, is going to be heading to a more **SRE** and **IaC** route (some pun intended). Rather than greenfield deployments that turn brown on their own, with bespoke custom configurations and only touched once in a blue moon for fear of an outage, network engineering is going to keep watering our deployment lawns, maintain the yard and re-landscape every season so that we never have an ugly patch of brown or crabgrass. I think these yardwork metaphors work; I hate yardwork! Companies, by and large, are still going to want offices, though they might be smaller than they might have been originally planned. Companies that grow to larger scale are probably going to still want Points of Presence for edge activity, which will also need backbone management. If a company is running entirely in public cloud services, they are going to evenutally have to adopt segmentation and firewalling between sensitive services. Your average SRE might be able to take care of it but someone knowledgeable in network security is probably a better choice. 

I foresee a shift in **how** network engineers are going to work - and I expect more of it to be with _IaC_ and like an _SRE_ - but this gets me thinkning about other traditional silos, namely information security.

#Security As A Monolith
In many companies, and the traditional model has been, that different information technology teams are separated by discipline - network engineers, software developers, database administrators, other systems administrators, etc. So as the organization of the information security pillar came about, it was its own, monolithic pillar like those other focuses. If you had "IT security" in your job description, you probably worked with other people who had "IT security" in their descriptions. The whole of InfoSec might be split into governance and policy teams and technical teams; the best technical teams would be functional in multiple domains (networks, systems, data, access/authentication) but subject matter experts in one or two specific domains. This means that your team not only needs to be keeping up with trends in their SME domains but also being able to teach and convey that information simultaneously to other colleagues. 

Compared to those other domains, this is an incredibly tall ask, especially given that IT security gets very in depth very quickly into specialties. This also causes friction amongst other teams in the techology organization - IT security is often the "bearer of bad news" when it comes to audit results and may not have the in depth background of a database engineer when they request 'data encryption at rest' and set an abitrary deadline. On its face it sounds reasonable but the database engineer would know in better detail the resources it would _actually_ take to accomplish the task.